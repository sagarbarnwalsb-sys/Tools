<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Compressor Tool</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
            color: #333;
            min-height: 100vh;
            padding: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        .container {
            width: 100%;
            max-width: 900px;
            background-color: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            overflow: hidden;
        }
        
        header {
            background: linear-gradient(to right, #4a00e0, #8e2de2);
            color: white;
            padding: 25px;
            text-align: center;
        }
        
        h1 {
            font-size: 2.2rem;
            margin-bottom: 10px;
        }
        
        .subtitle {
            font-size: 1rem;
            opacity: 0.9;
        }
        
        .main-content {
            display: flex;
            flex-wrap: wrap;
            padding: 25px;
        }
        
        .upload-section {
            flex: 1;
            min-width: 300px;
            padding: 20px;
        }
        
        .preview-section {
            flex: 1;
            min-width: 300px;
            padding: 20px;
            border-left: 1px solid #eee;
        }
        
        .upload-area {
            border: 2px dashed #8e2de2;
            border-radius: 10px;
            padding: 40px 20px;
            text-align: center;
            margin-bottom: 25px;
            transition: all 0.3s;
            cursor: pointer;
        }
        
        .upload-area:hover {
            background-color: #f9f5ff;
        }
        
        .upload-area i {
            font-size: 48px;
            color: #8e2de2;
            margin-bottom: 15px;
        }
        
        .upload-area p {
            margin-bottom: 15px;
            color: #666;
        }
        
        .btn {
            background: linear-gradient(to right, #4a00e0, #8e2de2);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 50px;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s;
            display: inline-block;
        }
        
        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        
        .btn:active {
            transform: translateY(0);
        }
        
        .btn-outline {
            background: transparent;
            border: 2px solid #8e2de2;
            color: #8e2de2;
        }
        
        .controls {
            margin-top: 25px;
        }
        
        .control-group {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #555;
        }
        
        input[type="range"] {
            width: 100%;
            height: 8px;
            -webkit-appearance: none;
            background: #e0e0e0;
            border-radius: 5px;
            outline: none;
        }
        
        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: #8e2de2;
            cursor: pointer;
        }
        
        .value-display {
            text-align: center;
            font-weight: bold;
            color: #8e2de2;
            margin-top: 5px;
        }
        
        .preview-container {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        
        .image-preview {
            width: 100%;
            max-width: 300px;
            height: 200px;
            border: 1px solid #ddd;
            border-radius: 8px;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
            margin-bottom: 20px;
            background-color: #f9f9f9;
        }
        
        .image-preview img {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
        }
        
        .file-info {
            width: 100%;
            background-color: #f5f5f5;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        
        .info-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
        }
        
        .info-label {
            font-weight: 600;
            color: #666;
        }
        
        .info-value {
            color: #333;
        }
        
        .compression-info {
            background-color: #e8f4ff;
            border-left: 4px solid #4a00e0;
            padding: 12px;
            border-radius: 4px;
            margin-top: 15px;
        }
        
        .action-buttons {
            display: flex;
            gap: 15px;
            margin-top: 20px;
        }
        
        footer {
            text-align: center;
            padding: 20px;
            background-color: #f5f5f5;
            color: #666;
            font-size: 0.9rem;
        }
        
        @media (max-width: 768px) {
            .preview-section {
                border-left: none;
                border-top: 1px solid #eee;
            }
        }
        
        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Image Compressor Tool</h1>
            <p class="subtitle">Reduce image file size without significant quality loss</p>
        </header>
        
        <div class="main-content">
            <div class="upload-section">
                <div class="upload-area" id="dropArea">
                    <i>üìÅ</i>
                    <h3>Drag & Drop your image here</h3>
                    <p>or</p>
                    <input type="file" id="fileInput" accept="image/*" class="hidden">
                    <button class="btn" id="browseBtn">Browse Files</button>
                </div>
                
                <div class="controls">
                    <div class="control-group">
                        <label for="quality">Compression Quality</label>
                        <input type="range" id="quality" min="10" max="100" value="80">
                        <div class="value-display">
                            <span id="qualityValue">80%</span>
                        </div>
                    </div>
                    
                    <div class="control-group">
                        <label for="maxWidth">Max Width (pixels)</label>
                        <input type="range" id="maxWidth" min="100" max="2000" value="1200" step="50">
                        <div class="value-display">
                            <span id="widthValue">1200px</span>
                        </div>
                    </div>
                    
                    <button class="btn" id="compressBtn">Compress Image</button>
                </div>
            </div>
            
            <div class="preview-section">
                <div class="preview-container">
                    <div class="image-preview" id="originalPreview">
                        <p>Original image preview</p>
                    </div>
                    
                    <div class="image-preview" id="compressedPreview">
                        <p>Compressed image preview</p>
                    </div>
                    
                    <div class="file-info">
                        <div class="info-row">
                            <span class="info-label">Original Size:</span>
                            <span class="info-value" id="originalSize">-</span>
                        </div>
                        <div class="info-row">
                            <span class="info-label">Compressed Size:</span>
                            <span class="info-value" id="compressedSize">-</span>
                        </div>
                        <div class="info-row">
                            <span class="info-label">Reduction:</span>
                            <span class="info-value" id="reduction">-</span>
                        </div>
                    </div>
                    
                    <div class="compression-info">
                        <p>Adjust the quality and dimensions to balance between file size and image quality.</p>
                    </div>
                    
                    <div class="action-buttons">
                        <button class="btn btn-outline" id="resetBtn">Reset</button>
                        <button class="btn" id="downloadBtn" disabled>Download Compressed Image</button>
                    </div>
                </div>
            </div>
        </div>
        
        <footer>
            <p>Image Compressor Tool &copy; 2023 | All processing happens in your browser - your images are never uploaded to any server.</p>
        </footer>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // DOM Elements
            const fileInput = document.getElementById('fileInput');
            const browseBtn = document.getElementById('browseBtn');
            const dropArea = document.getElementById('dropArea');
            const qualitySlider = document.getElementById('quality');
            const qualityValue = document.getElementById('qualityValue');
            const maxWidthSlider = document.getElementById('maxWidth');
            const widthValue = document.getElementById('widthValue');
            const compressBtn = document.getElementById('compressBtn');
            const resetBtn = document.getElementById('resetBtn');
            const downloadBtn = document.getElementById('downloadBtn');
            const originalPreview = document.getElementById('originalPreview');
            const compressedPreview = document.getElementById('compressedPreview');
            const originalSize = document.getElementById('originalSize');
            const compressedSize = document.getElementById('compressedSize');
            const reduction = document.getElementById('reduction');
            
            // Variables
            let originalImage = null;
            let compressedImageUrl = null;
            let originalFileSize = 0;
            
            // Event Listeners
            browseBtn.addEventListener('click', () => fileInput.click());
            fileInput.addEventListener('change', handleFileSelect);
            dropArea.addEventListener('dragover', handleDragOver);
            dropArea.addEventListener('drop', handleDrop);
            qualitySlider.addEventListener('input', updateQualityValue);
            maxWidthSlider.addEventListener('input', updateWidthValue);
            compressBtn.addEventListener('click', compressImage);
            resetBtn.addEventListener('click', resetTool);
            downloadBtn.addEventListener('click', downloadImage);
            
            // Functions
            function handleDragOver(e) {
                e.preventDefault();
                dropArea.style.backgroundColor = '#f0e6ff';
            }
            
            function handleDrop(e) {
                e.preventDefault();
                dropArea.style.backgroundColor = '';
                
                if (e.dataTransfer.files.length) {
                    handleFile(e.dataTransfer.files[0]);
                }
            }
            
            function handleFileSelect(e) {
                if (e.target.files.length) {
                    handleFile(e.target.files[0]);
                }
            }
            
            function handleFile(file) {
                if (!file.type.match('image.*')) {
                    alert('Please select an image file (JPEG, PNG, etc.)');
                    return;
                }
                
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    originalImage = new Image();
                    originalImage.onload = function() {
                        displayOriginalImage();
                        originalFileSize = formatFileSize(file.size);
                        originalSize.textContent = originalFileSize;
                        resetCompressedInfo();
                    };
                    originalImage.src = e.target.result;
                };
                
                reader.readAsDataURL(file);
            }
            
            function displayOriginalImage() {
                originalPreview.innerHTML = '';
                const img = document.createElement('img');
                img.src = originalImage.src;
                originalPreview.appendChild(img);
            }
            
            function updateQualityValue() {
                qualityValue.textContent = `${qualitySlider.value}%`;
            }
            
            function updateWidthValue() {
                widthValue.textContent = `${maxWidthSlider.value}px`;
            }
            
            function compressImage() {
                if (!originalImage) {
                    alert('Please select an image first');
                    return;
                }
                
                const quality = parseInt(qualitySlider.value) / 100;
                const maxWidth = parseInt(maxWidthSlider.value);
                
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                
                // Calculate new dimensions while maintaining aspect ratio
                let width = originalImage.width;
                let height = originalImage.height;
                
                if (width > maxWidth) {
                    height = (height * maxWidth) / width;
                    width = maxWidth;
                }
                
                canvas.width = width;
                canvas.height = height;
                
                // Draw image on canvas
                ctx.drawImage(originalImage, 0, 0, width, height);
                
                // Get compressed image data URL (JPEG format)
                compressedImageUrl = canvas.toDataURL('image/jpeg', quality);
                
                // Display compressed image
                compressedPreview.innerHTML = '';
                const compressedImg = document.createElement('img');
                compressedImg.src = compressedImageUrl;
                compressedPreview.appendChild(compressedImg);
                
                // Calculate file sizes
                const compressedFileSize = formatFileSize(calculateFileSize(compressedImageUrl));
                compressedSize.textContent = compressedFileSize;
                
                // Calculate reduction percentage
                const originalSizeBytes = getFileSizeFromString(originalFileSize);
                const compressedSizeBytes = getFileSizeFromString(compressedFileSize);
                
                if (originalSizeBytes > 0) {
                    const reductionPercent = ((originalSizeBytes - compressedSizeBytes) / originalSizeBytes * 100).toFixed(1);
                    reduction.textContent = `${reductionPercent}%`;
                }
                
                // Enable download button
                downloadBtn.disabled = false;
            }
            
            function calculateFileSize(dataURL) {
                // Calculate the file size of a base64 string
                if (dataURL.includes(',')) {
                    const base64 = dataURL.split(',')[1];
                    return (base64.length * 0.75); // Approximate size in bytes
                }
                return 0;
            }
            
            function formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';
                
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }
            
            function getFileSizeFromString(sizeString) {
                const units = {
                    'Bytes': 1,
                    'KB': 1024,
                    'MB': 1024 * 1024,
                    'GB': 1024 * 1024 * 1024
                };
                
                const parts = sizeString.split(' ');
                const value = parseFloat(parts[0]);
                const unit = parts[1];
                
                return value * (units[unit] || 1);
            }
            
            function resetCompressedInfo() {
                compressedPreview.innerHTML = '<p>Compressed image preview</p>';
                compressedSize.textContent = '-';
                reduction.textContent = '-';
                downloadBtn.disabled = true;
                compressedImageUrl = null;
            }
            
            function resetTool() {
                fileInput.value = '';
                originalPreview.innerHTML = '<p>Original image preview</p>';
                resetCompressedInfo();
                originalSize.textContent = '-';
                qualitySlider.value = 80;
                maxWidthSlider.value = 1200;
                updateQualityValue();
                updateWidthValue();
                originalImage = null;
            }
            
            function downloadImage() {
                if (!compressedImageUrl) return;
                
                const link = document.createElement('a');
                link.download = 'compressed-image.jpg';
                link.href = compressedImageUrl;
                link.click();
            }
            
            // Initialize values
            updateQualityValue();
            updateWidthValue();
        });
    </script>
</body>
</html>
